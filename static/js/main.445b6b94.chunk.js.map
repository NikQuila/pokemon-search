{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","href","pokemon","name","bg","border","text","className","ImgOverlay","Img","variant","src","Body","Title","Button","CardList","pokemons","map","index","key","SearchBox","placeholder","handleChange","type","onChange","alt","App","e","setState","searchField","target","value","state","fetch","then","response","json","results","this","filteredPokemons","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+VAKaA,EAAO,SAACC,GAAD,OAClB,uBAAGC,KAAI,uCAAkCD,EAAME,QAAQC,OACrD,kBAAC,IAAD,CAAQC,GAAG,QAAQC,OAAO,OAAOC,KAAK,UAAUC,UAAU,kBACxD,kBAAC,IAAOC,WAAR,KACE,kBAAC,IAAOC,IAAR,CACEC,QAAQ,MACRC,IAAG,iFAA4EX,EAAME,QAAQC,KAA1F,WAGP,kBAAC,IAAOM,IAAR,CAAYE,IAAI,2KAEhB,kBAAC,IAAOC,KAAR,KACE,kBAAC,IAAOC,MAAR,CAAcN,UAAU,cAAcP,EAAME,QAAQC,MACpD,kBAACW,EAAA,EAAD,CAAQJ,QAAQ,WAAhB,gBCdKK,G,MAAW,SAACf,GACvB,OACE,yBAAKO,UAAU,aACZP,EAAMgB,SAASC,KAAI,SAACf,EAASgB,GAAV,OAClB,kBAAC,EAAD,CAAMC,IAAKD,EAAOhB,QAASA,UCLtBkB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,yBAAKf,UAAU,aACb,2BACEA,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,IAEZ,yBACEG,IAAI,UACJlB,UAAU,WACVI,IAAI,uFC2BKe,E,kDAnCb,aAAe,IAAD,8BACZ,gBAYFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZtC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,YAAa,IAJH,E,gEAOO,IAAD,OAClBI,MAAM,yDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAChC,GAAD,OAAa,EAAK0B,SAAS,CAAEZ,SAAUd,EAAQmC,e,+BAM/C,IAAD,EAC2BC,KAAKN,MAA/BhB,EADD,EACCA,SAAUa,EADX,EACWA,YACZU,EAAmBvB,EAASwB,QAAO,SAACtC,GACxC,OAAOA,EAAQC,KAAKsC,cAAcC,SAASb,EAAYY,kBAEzD,OACE,yBAAKlC,UAAU,OACb,wBAAIA,UAAU,UAAd,kBAEA,kBAAC,EAAD,CACEc,YAAY,iBACZC,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAUN,SAAUuB,S,GA9BVI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.445b6b94.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport CardBS from \"react-bootstrap/Card\";\r\n\r\nexport const Card = (props) => (\r\n  <a href={`https://www.wikidex.net/wiki/${props.pokemon.name}`}>\r\n    <CardBS bg=\"light\" border=\"dark\" text=\"primary\" className=\"card-container\">\r\n      <CardBS.ImgOverlay>\r\n        <CardBS.Img\r\n          variant=\"top\"\r\n          src={`https://img.pokemondb.net/sprites/omega-ruby-alpha-sapphire/dex/normal/${props.pokemon.name}.png`}\r\n        />\r\n      </CardBS.ImgOverlay>\r\n      <CardBS.Img src=\"https://static.vecteezy.com/system/resources/previews/000/625/844/non_2x/geometric-abstract-light-blue-background-for-website-wallpapers-bussines-templates-vector.jpg\"></CardBS.Img>\r\n\r\n      <CardBS.Body>\r\n        <CardBS.Title className=\"capitalize\">{props.pokemon.name}</CardBS.Title>\r\n        <Button variant=\"success\">Check it</Button>\r\n      </CardBS.Body>\r\n    </CardBS>\r\n  </a>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.pokemons.map((pokemon, index) => (\r\n        <Card key={index} pokemon={pokemon} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <div className=\"container\">\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    ></input>\r\n    <img\r\n      alt=\"pokemon\"\r\n      className=\"pokeball\"\r\n      src=\"https://upload.wikimedia.org/wikipedia/commons/5/51/Pokebola-pokeball-png-0.png\"\r\n    ></img>\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=721\")\n      .then((response) => response.json())\n      .then((pokemon) => this.setState({ pokemons: pokemon.results }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { pokemons, searchField } = this.state;\n    const filteredPokemons = pokemons.filter((pokemon) => {\n      return pokemon.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <h1 className=\"titulo\">Pokemon Search</h1>\n\n        <SearchBox\n          placeholder=\"search Pokemon\"\n          handleChange={this.handleChange}\n        ></SearchBox>\n        <CardList pokemons={filteredPokemons}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}